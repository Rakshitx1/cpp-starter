#!/bin/bash

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# Save the current directory
CURRENT_DIR=$(pwd)

# Navigate to the script directory
cd "$SCRIPT_DIR"

# Determine build type based on input argument
if [[ "${1,,}" == "release" || "${1,,}" == "r" ]]; then
    BUILD_TYPE="Release"
    echo -e "\033[34mBuilding in Release mode...\033[0m"
else
    BUILD_TYPE="Debug"
    echo -e "\033[34mBuilding in Debug mode...\033[0m"
fi

# Remove existing build directory if it exists
if [ -d "build" ]; then
    rm -rf build
fi

# Create a new build directory
mkdir -p build

# Generate Makefiles and build the project with the specified build type
cmake -DCMAKE_BUILD_TYPE="$BUILD_TYPE" -S . -B build/

# Check if the configuration file exists
CONFIG_FILE="build/project_config.sh"
if [ ! -f "$CONFIG_FILE" ]; then
    echo -e "\033[34mConfiguration file not found: $CONFIG_FILE\033[0m"
    exit 1
fi

# Build the project
cmake --build build/

# Source the project configuration generated by CMake
source "$CONFIG_FILE"

# Run the executable with all arguments from the third onward
if [ "$BUILD_TYPE" == "Release" ]; then
    EXECUTABLE="./build/Release/$PROJECT_NAME"
else
    EXECUTABLE="./build/Debug/$PROJECT_NAME"
fi

"$EXECUTABLE" "${@:3}"

# Check if any of the input arguments is "b", then delete build directory
if [[ "${1,,}" == "b" || "${2,,}" == "b" ]]; then
    cd "$SCRIPT_DIR"
    rm -rf build
    echo -e "\033[34mBuild directory deleted.\033[0m"
fi

# Return to the initial directory
cd "$CURRENT_DIR"
